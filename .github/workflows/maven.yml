name: Java CI with Maven

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:10.11.8  # Явный тег для стабильности
        env:
          MARIADB_DATABASE: Joupen
          MARIADB_USER: user
          MARIADB_PASSWORD: user_password
          MARIADB_ROOT_PASSWORD: root_password
        ports:
          - 3307:3306  # Избегаем потенциальных конфликтов
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=30
          --memory=512m
          --cpus=0.5

    steps:
      - uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          docker image prune -f
          df -h

      - name: Check Docker image availability
        run: |
          docker pull mariadb:10.11.8 || { echo "Failed to pull mariadb:10.11.8"; exit 1; }
          docker inspect mariadb:10.11.8

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Install MariaDB client & netcat
        run: |
          sudo apt-get update
          sudo apt-get install -y mariadb-client netcat-openbsd
          which mysql
          which mysqladmin
          mysql --version
          mysqladmin --version

      - name: Debug container creation
        run: |
          docker ps -a
          docker inspect ${{ job.services.mariadb.id }} || true
          docker logs ${{ job.services.mariadb.id }} || true
        if: always()

      - name: Wait for MariaDB (root ping + TCP + user check)
        run: |
          for i in {1..120}; do
            if nc -z mariadb 3307; then
              echo "TCP 3307 is open"
              break
            fi
            echo "Waiting for port 3307... ($i/120)"
            sleep 2
          done || { echo "TCP timeout"; exit 1; }
          for i in {1..120}; do
            if mysqladmin --host=mariadb --port=3307 -uroot -proot_password ping --silent 2>/dev/null; then
              echo "MariaDB is ready (root ping)!"
              break
            fi
            echo "Waiting for MariaDB root ping... ($i/120)"
            sleep 2
          done || { echo "Root ping timeout"; exit 1; }
          for i in {1..60}; do
            if mysql -hmariadb -P3307 -uuser -puser_password -D Joupen -e "SELECT 1 as ok;" 2>/dev/null; then
              echo "User access ready!"
              break
            fi
            echo "Waiting for user access... ($i/60)"
            sleep 2
          done || { echo "User access timeout"; exit 1; }

      - name: Ensure DB and grants exist
        run: |
          mysql -hmariadb -P3307 -uroot -proot_password -e "CREATE DATABASE IF NOT EXISTS Joupen;"
          mysql -hmariadb -P3307 -uroot -proot_password -e "CREATE USER IF NOT EXISTS 'user'@'%' IDENTIFIED BY 'user_password';"
          mysql -hmariadb -P3307 -uroot -proot_password -e "GRANT ALL ON Joupen.* TO 'user'@'%'; GRANT SELECT ON *.* TO 'user'@'%'; FLUSH PRIVILEGES;"
          mysql -hmariadb -P3307 -uuser -puser_password -D Joupen -e "SELECT 1 as ok;"

      - name: Run Liquibase migrations
        run: |
          mvn -B -P liquibase-update \
            -Ddatabase.url="jdbc:mariadb://mariadb:3307/Joupen?connectTimeout=30000&socketTimeout=60000" \
            -Ddatabase.user="user" \
            -Ddatabase.password="user_password" \
            -Ddatabase.driver="org.mariadb.jdbc.Driver" \
            -Ddatabase.schema="Joupen" \
            -Dliquibase.logLevel=debug \
            -Dliquibase.connectTimeout=30 \
            -Dliquibase.socketTimeout=30 \
            org.liquibase:liquibase-maven-plugin:4.29.2:update

      - name: Validate Liquibase properties
        run: |
          cat target/liquibase.properties

      - name: Generate jOOQ code
        run: |
          mvn -B generate-sources \
            -Ddatabase.url="jdbc:mariadb://mariadb:3307/Joupen?connectTimeout=30000&socketTimeout=60000" \
            -Ddatabase.user="user" \
            -Ddatabase.password="user_password" \
            -Ddatabase.driver="org.mariadb.jdbc.Driver" \
            -Ddatabase.schema="Joupen"

      - name: Validate jOOQ config
        run: |
          cat target/jooq-config.xml

      - name: Test & Package
        run: |
          mvn -B verify \
            -Ddatabase.url="jdbc:mariadb://mariadb:3307/Joupen?connectTimeout=30000&socketTimeout=60000" \
            -Ddatabase.user="user" \
            -Ddatabase.password="user_password" \
            -Ddatabase.driver="org.mariadb.jdbc.Driver" \
            -Ddatabase.schema="Joupen"

      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: joupen-plugin-jars
          path: |
            target/original-JoupenPlugin-*.jar
            target/JoupenPlugin-*.jar

      - name: Dump MariaDB service logs (on failure)
        if: failure()
        run: |
          echo "---- docker logs (mariadb) ----"
          docker logs ${{ job.services.mariadb.id }} || true

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            target/surefire-reports/*.xml
            target/failsafe-reports/*.xml